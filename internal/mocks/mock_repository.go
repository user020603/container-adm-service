// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/container_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dto "thanhnt208/container-adm-service/internal/dto"
	model "thanhnt208/container-adm-service/internal/model"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIContainerRepository is a mock of IContainerRepository interface.
type MockIContainerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIContainerRepositoryMockRecorder
}

// MockIContainerRepositoryMockRecorder is the mock recorder for MockIContainerRepository.
type MockIContainerRepositoryMockRecorder struct {
	mock *MockIContainerRepository
}

// NewMockIContainerRepository creates a new mock instance.
func NewMockIContainerRepository(ctrl *gomock.Controller) *MockIContainerRepository {
	mock := &MockIContainerRepository{ctrl: ctrl}
	mock.recorder = &MockIContainerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContainerRepository) EXPECT() *MockIContainerRepositoryMockRecorder {
	return m.recorder
}

// AddContainerStatus mocks base method.
func (m *MockIContainerRepository) AddContainerStatus(ctx context.Context, id uint, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContainerStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContainerStatus indicates an expected call of AddContainerStatus.
func (mr *MockIContainerRepositoryMockRecorder) AddContainerStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContainerStatus", reflect.TypeOf((*MockIContainerRepository)(nil).AddContainerStatus), ctx, id, status)
}

// CreateContainer mocks base method.
func (m *MockIContainerRepository) CreateContainer(ctx context.Context, container *model.Container) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", ctx, container)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockIContainerRepositoryMockRecorder) CreateContainer(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockIContainerRepository)(nil).CreateContainer), ctx, container)
}

// CreateManyContainers mocks base method.
func (m *MockIContainerRepository) CreateManyContainers(ctx context.Context, containers []model.Container) ([]model.Container, []model.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManyContainers", ctx, containers)
	ret0, _ := ret[0].([]model.Container)
	ret1, _ := ret[1].([]model.Container)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateManyContainers indicates an expected call of CreateManyContainers.
func (mr *MockIContainerRepositoryMockRecorder) CreateManyContainers(ctx, containers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManyContainers", reflect.TypeOf((*MockIContainerRepository)(nil).CreateManyContainers), ctx, containers)
}

// DeleteContainer mocks base method.
func (m *MockIContainerRepository) DeleteContainer(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockIContainerRepositoryMockRecorder) DeleteContainer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockIContainerRepository)(nil).DeleteContainer), ctx, id)
}

// GetContainerByID mocks base method.
func (m *MockIContainerRepository) GetContainerByID(ctx context.Context, id uint) (*model.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerByID", ctx, id)
	ret0, _ := ret[0].(*model.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerByID indicates an expected call of GetContainerByID.
func (mr *MockIContainerRepositoryMockRecorder) GetContainerByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerByID", reflect.TypeOf((*MockIContainerRepository)(nil).GetContainerByID), ctx, id)
}

// GetContainerInfo mocks base method.
func (m *MockIContainerRepository) GetContainerInfo(ctx context.Context) ([]dto.ContainerName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerInfo", ctx)
	ret0, _ := ret[0].([]dto.ContainerName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerInfo indicates an expected call of GetContainerInfo.
func (mr *MockIContainerRepositoryMockRecorder) GetContainerInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerInfo", reflect.TypeOf((*MockIContainerRepository)(nil).GetContainerInfo), ctx)
}

// GetContainerUptimeDuration mocks base method.
func (m *MockIContainerRepository) GetContainerUptimeDuration(ctx context.Context, startTime, endTime time.Time) (*dto.UptimeDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerUptimeDuration", ctx, startTime, endTime)
	ret0, _ := ret[0].(*dto.UptimeDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerUptimeDuration indicates an expected call of GetContainerUptimeDuration.
func (mr *MockIContainerRepositoryMockRecorder) GetContainerUptimeDuration(ctx, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerUptimeDuration", reflect.TypeOf((*MockIContainerRepository)(nil).GetContainerUptimeDuration), ctx, startTime, endTime)
}

// GetContainerUptimeRatio mocks base method.
func (m *MockIContainerRepository) GetContainerUptimeRatio(ctx context.Context, startTime, endTime time.Time) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerUptimeRatio", ctx, startTime, endTime)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerUptimeRatio indicates an expected call of GetContainerUptimeRatio.
func (mr *MockIContainerRepositoryMockRecorder) GetContainerUptimeRatio(ctx, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerUptimeRatio", reflect.TypeOf((*MockIContainerRepository)(nil).GetContainerUptimeRatio), ctx, startTime, endTime)
}

// GetNumContainers mocks base method.
func (m *MockIContainerRepository) GetNumContainers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumContainers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumContainers indicates an expected call of GetNumContainers.
func (mr *MockIContainerRepositoryMockRecorder) GetNumContainers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumContainers", reflect.TypeOf((*MockIContainerRepository)(nil).GetNumContainers), ctx)
}

// GetNumRunningContainers mocks base method.
func (m *MockIContainerRepository) GetNumRunningContainers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumRunningContainers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumRunningContainers indicates an expected call of GetNumRunningContainers.
func (mr *MockIContainerRepositoryMockRecorder) GetNumRunningContainers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumRunningContainers", reflect.TypeOf((*MockIContainerRepository)(nil).GetNumRunningContainers), ctx)
}

// UpdateContainer mocks base method.
func (m *MockIContainerRepository) UpdateContainer(ctx context.Context, id uint, updateData map[string]interface{}) (*model.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainer", ctx, id, updateData)
	ret0, _ := ret[0].(*model.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainer indicates an expected call of UpdateContainer.
func (mr *MockIContainerRepositoryMockRecorder) UpdateContainer(ctx, id, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainer", reflect.TypeOf((*MockIContainerRepository)(nil).UpdateContainer), ctx, id, updateData)
}

// ViewAllContainers mocks base method.
func (m *MockIContainerRepository) ViewAllContainers(ctx context.Context, containerFilter *dto.ContainerFilter, from, to int, sortBy, sortOrder string) (int64, []model.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllContainers", ctx, containerFilter, from, to, sortBy, sortOrder)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]model.Container)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ViewAllContainers indicates an expected call of ViewAllContainers.
func (mr *MockIContainerRepositoryMockRecorder) ViewAllContainers(ctx, containerFilter, from, to, sortBy, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllContainers", reflect.TypeOf((*MockIContainerRepository)(nil).ViewAllContainers), ctx, containerFilter, from, to, sortBy, sortOrder)
}
