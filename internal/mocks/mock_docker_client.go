// Code generated by MockGen. DO NOT EDIT.
// Source: external/client/docker_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDockerClient is a mock of IDockerClient interface.
type MockIDockerClient struct {
	ctrl     *gomock.Controller
	recorder *MockIDockerClientMockRecorder
}

// MockIDockerClientMockRecorder is the mock recorder for MockIDockerClient.
type MockIDockerClientMockRecorder struct {
	mock *MockIDockerClient
}

// NewMockIDockerClient creates a new mock instance.
func NewMockIDockerClient(ctrl *gomock.Controller) *MockIDockerClient {
	mock := &MockIDockerClient{ctrl: ctrl}
	mock.recorder = &MockIDockerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDockerClient) EXPECT() *MockIDockerClientMockRecorder {
	return m.recorder
}

// RemoveContainer mocks base method.
func (m *MockIDockerClient) RemoveContainer(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainer", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer.
func (mr *MockIDockerClientMockRecorder) RemoveContainer(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockIDockerClient)(nil).RemoveContainer), ctx, containerID)
}

// StartContainer mocks base method.
func (m *MockIDockerClient) StartContainer(ctx context.Context, containerName, imageName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", ctx, containerName, imageName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockIDockerClientMockRecorder) StartContainer(ctx, containerName, imageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockIDockerClient)(nil).StartContainer), ctx, containerName, imageName)
}

// StartExistingContainer mocks base method.
func (m *MockIDockerClient) StartExistingContainer(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExistingContainer", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartExistingContainer indicates an expected call of StartExistingContainer.
func (mr *MockIDockerClientMockRecorder) StartExistingContainer(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExistingContainer", reflect.TypeOf((*MockIDockerClient)(nil).StartExistingContainer), ctx, containerID)
}

// StopContainer mocks base method.
func (m *MockIDockerClient) StopContainer(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockIDockerClientMockRecorder) StopContainer(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockIDockerClient)(nil).StopContainer), ctx, containerID)
}
