// Code generated by MockGen. DO NOT EDIT.
// Source: service/container_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	dto "thanhnt208/container-adm-service/internal/dto"
	model "thanhnt208/container-adm-service/internal/model"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIContainerService is a mock of IContainerService interface.
type MockIContainerService struct {
	ctrl     *gomock.Controller
	recorder *MockIContainerServiceMockRecorder
}

// MockIContainerServiceMockRecorder is the mock recorder for MockIContainerService.
type MockIContainerServiceMockRecorder struct {
	mock *MockIContainerService
}

// NewMockIContainerService creates a new mock instance.
func NewMockIContainerService(ctrl *gomock.Controller) *MockIContainerService {
	mock := &MockIContainerService{ctrl: ctrl}
	mock.recorder = &MockIContainerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContainerService) EXPECT() *MockIContainerServiceMockRecorder {
	return m.recorder
}

// AddContainerStatus mocks base method.
func (m *MockIContainerService) AddContainerStatus(ctx context.Context, id uint, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContainerStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContainerStatus indicates an expected call of AddContainerStatus.
func (mr *MockIContainerServiceMockRecorder) AddContainerStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContainerStatus", reflect.TypeOf((*MockIContainerService)(nil).AddContainerStatus), ctx, id, status)
}

// CreateContainer mocks base method.
func (m *MockIContainerService) CreateContainer(ctx context.Context, containerName, imageName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", ctx, containerName, imageName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockIContainerServiceMockRecorder) CreateContainer(ctx, containerName, imageName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockIContainerService)(nil).CreateContainer), ctx, containerName, imageName)
}

// DeleteContainer mocks base method.
func (m *MockIContainerService) DeleteContainer(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockIContainerServiceMockRecorder) DeleteContainer(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockIContainerService)(nil).DeleteContainer), ctx, id)
}

// ExportContainers mocks base method.
func (m *MockIContainerService) ExportContainers(ctx context.Context, containerFilter *dto.ContainerFilter, from, to int, sortBy, sortOrder string) (*dto.ExportData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportContainers", ctx, containerFilter, from, to, sortBy, sortOrder)
	ret0, _ := ret[0].(*dto.ExportData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportContainers indicates an expected call of ExportContainers.
func (mr *MockIContainerServiceMockRecorder) ExportContainers(ctx, containerFilter, from, to, sortBy, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportContainers", reflect.TypeOf((*MockIContainerService)(nil).ExportContainers), ctx, containerFilter, from, to, sortBy, sortOrder)
}

// GetAllContainers mocks base method.
func (m *MockIContainerService) GetAllContainers(ctx context.Context) ([]dto.ContainerName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllContainers", ctx)
	ret0, _ := ret[0].([]dto.ContainerName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContainers indicates an expected call of GetAllContainers.
func (mr *MockIContainerServiceMockRecorder) GetAllContainers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContainers", reflect.TypeOf((*MockIContainerService)(nil).GetAllContainers), ctx)
}

// GetContainerUptimeDuration mocks base method.
func (m *MockIContainerService) GetContainerUptimeDuration(ctx context.Context, startTime, endTime time.Time) (*dto.UptimeDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerUptimeDuration", ctx, startTime, endTime)
	ret0, _ := ret[0].(*dto.UptimeDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerUptimeDuration indicates an expected call of GetContainerUptimeDuration.
func (mr *MockIContainerServiceMockRecorder) GetContainerUptimeDuration(ctx, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerUptimeDuration", reflect.TypeOf((*MockIContainerService)(nil).GetContainerUptimeDuration), ctx, startTime, endTime)
}

// GetContainerUptimeRatio mocks base method.
func (m *MockIContainerService) GetContainerUptimeRatio(ctx context.Context, startTime, endTime time.Time) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerUptimeRatio", ctx, startTime, endTime)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerUptimeRatio indicates an expected call of GetContainerUptimeRatio.
func (mr *MockIContainerServiceMockRecorder) GetContainerUptimeRatio(ctx, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerUptimeRatio", reflect.TypeOf((*MockIContainerService)(nil).GetContainerUptimeRatio), ctx, startTime, endTime)
}

// GetNumContainers mocks base method.
func (m *MockIContainerService) GetNumContainers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumContainers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumContainers indicates an expected call of GetNumContainers.
func (mr *MockIContainerServiceMockRecorder) GetNumContainers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumContainers", reflect.TypeOf((*MockIContainerService)(nil).GetNumContainers), ctx)
}

// GetNumRunningContainers mocks base method.
func (m *MockIContainerService) GetNumRunningContainers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumRunningContainers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumRunningContainers indicates an expected call of GetNumRunningContainers.
func (mr *MockIContainerServiceMockRecorder) GetNumRunningContainers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumRunningContainers", reflect.TypeOf((*MockIContainerService)(nil).GetNumRunningContainers), ctx)
}

// ImportContainers mocks base method.
func (m *MockIContainerService) ImportContainers(ctx context.Context, buf []byte) (*dto.ImportResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportContainers", ctx, buf)
	ret0, _ := ret[0].(*dto.ImportResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportContainers indicates an expected call of ImportContainers.
func (mr *MockIContainerServiceMockRecorder) ImportContainers(ctx, buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportContainers", reflect.TypeOf((*MockIContainerService)(nil).ImportContainers), ctx, buf)
}

// UpdateContainer mocks base method.
func (m *MockIContainerService) UpdateContainer(ctx context.Context, id uint, updateData map[string]interface{}) (*model.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainer", ctx, id, updateData)
	ret0, _ := ret[0].(*model.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainer indicates an expected call of UpdateContainer.
func (mr *MockIContainerServiceMockRecorder) UpdateContainer(ctx, id, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainer", reflect.TypeOf((*MockIContainerService)(nil).UpdateContainer), ctx, id, updateData)
}

// ViewAllContainers mocks base method.
func (m *MockIContainerService) ViewAllContainers(ctx context.Context, containerFilter *dto.ContainerFilter, from, to int, sortBy, sortOrder string) (int64, []model.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllContainers", ctx, containerFilter, from, to, sortBy, sortOrder)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]model.Container)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ViewAllContainers indicates an expected call of ViewAllContainers.
func (mr *MockIContainerServiceMockRecorder) ViewAllContainers(ctx, containerFilter, from, to, sortBy, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllContainers", reflect.TypeOf((*MockIContainerService)(nil).ViewAllContainers), ctx, containerFilter, from, to, sortBy, sortOrder)
}
