// Code generated by MockGen. DO NOT EDIT.
// Source: reader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
)

// MockIKafkaReader is a mock of IKafkaReader interface.
type MockIKafkaReader struct {
	ctrl     *gomock.Controller
	recorder *MockIKafkaReaderMockRecorder
}

// MockIKafkaReaderMockRecorder is the mock recorder for MockIKafkaReader.
type MockIKafkaReaderMockRecorder struct {
	mock *MockIKafkaReader
}

// NewMockIKafkaReader creates a new mock instance.
func NewMockIKafkaReader(ctrl *gomock.Controller) *MockIKafkaReader {
	mock := &MockIKafkaReader{ctrl: ctrl}
	mock.recorder = &MockIKafkaReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKafkaReader) EXPECT() *MockIKafkaReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIKafkaReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIKafkaReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIKafkaReader)(nil).Close))
}

// ReadMessage mocks base method.
func (m *MockIKafkaReader) ReadMessage(ctx context.Context) (kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", ctx)
	ret0, _ := ret[0].(kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockIKafkaReaderMockRecorder) ReadMessage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockIKafkaReader)(nil).ReadMessage), ctx)
}
